
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b58  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002c18  08002c18  00003c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca0  08002ca0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca0  08002ca0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca0  08002ca0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca0  08002ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ca4  08002ca4  00003ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ca8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08002cb4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08002cb4  000041b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5fe  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8e  00000000  00000000  0000f632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  000110c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000721  00000000  00000000  00011a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001365e  00000000  00000000  00012121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b47c  00000000  00000000  0002577f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007be18  00000000  00000000  00030bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aca13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b4  00000000  00000000  000aca58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000aeb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c00 	.word	0x08002c00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c00 	.word	0x08002c00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fb19 	bl	8000a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f80a 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f93a 	bl	8000678 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000404:	f000 f84a 	bl	800049c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000408:	f000 f8b4 	bl	8000574 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800040c:	f000 f900 	bl	8000610 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000410:	46c0      	nop			@ (mov r8, r8)
 8000412:	e7fd      	b.n	8000410 <main+0x1c>

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b08d      	sub	sp, #52	@ 0x34
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	2414      	movs	r4, #20
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	231c      	movs	r3, #28
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 fbbf 	bl	8002ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	003b      	movs	r3, r7
 800042c:	0018      	movs	r0, r3
 800042e:	2314      	movs	r3, #20
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f002 fbb8 	bl	8002ba8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000438:	193b      	adds	r3, r7, r4
 800043a:	2202      	movs	r2, #2
 800043c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	193b      	adds	r3, r7, r4
 8000440:	2280      	movs	r2, #128	@ 0x80
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2240      	movs	r2, #64	@ 0x40
 8000450:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	193b      	adds	r3, r7, r4
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fa25 	bl	80018a4 <HAL_RCC_OscConfig>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800045e:	f000 f979 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	003b      	movs	r3, r7
 8000464:	2207      	movs	r2, #7
 8000466:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000468:	003b      	movs	r3, r7
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	003b      	movs	r3, r7
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000474:	003b      	movs	r3, r7
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800047a:	003b      	movs	r3, r7
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000480:	003b      	movs	r3, r7
 8000482:	2101      	movs	r1, #1
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fbf1 	bl	8001c6c <HAL_RCC_ClockConfig>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800048e:	f000 f961 	bl	8000754 <Error_Handler>
  }
}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	b00d      	add	sp, #52	@ 0x34
 8000498:	bd90      	pop	{r4, r7, pc}
	...

0800049c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	0018      	movs	r0, r3
 80004a6:	230c      	movs	r3, #12
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f002 fb7c 	bl	8002ba8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004b2:	4a2e      	ldr	r2, [pc, #184]	@ (800056c <MX_ADC1_Init+0xd0>)
 80004b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004b8:	2280      	movs	r2, #128	@ 0x80
 80004ba:	05d2      	lsls	r2, r2, #23
 80004bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004be:	4b2a      	ldr	r3, [pc, #168]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c4:	4b28      	ldr	r3, [pc, #160]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ca:	4b27      	ldr	r3, [pc, #156]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d0:	4b25      	ldr	r3, [pc, #148]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d6:	4b24      	ldr	r3, [pc, #144]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004d8:	2200      	movs	r2, #0
 80004da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004dc:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004de:	2200      	movs	r2, #0
 80004e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e2:	4b21      	ldr	r3, [pc, #132]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004f0:	2220      	movs	r2, #32
 80004f2:	2100      	movs	r1, #0
 80004f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <MX_ADC1_Init+0xcc>)
 80004fe:	2200      	movs	r2, #0
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000502:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <MX_ADC1_Init+0xcc>)
 8000504:	222c      	movs	r2, #44	@ 0x2c
 8000506:	2100      	movs	r1, #0
 8000508:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_ADC1_Init+0xcc>)
 800050c:	2200      	movs	r2, #0
 800050e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000510:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <MX_ADC1_Init+0xcc>)
 8000512:	2200      	movs	r2, #0
 8000514:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_ADC1_Init+0xcc>)
 8000518:	2200      	movs	r2, #0
 800051a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800051c:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <MX_ADC1_Init+0xcc>)
 800051e:	223c      	movs	r2, #60	@ 0x3c
 8000520:	2100      	movs	r1, #0
 8000522:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000524:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_ADC1_Init+0xcc>)
 8000526:	2200      	movs	r2, #0
 8000528:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_ADC1_Init+0xcc>)
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fbf9 	bl	8000d24 <HAL_ADC_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000536:	f000 f90d 	bl	8000754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <MX_ADC1_Init+0xd4>)
 800053e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800054c:	1d3a      	adds	r2, r7, #4
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_ADC1_Init+0xcc>)
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fd8c 	bl	8001070 <HAL_ADC_ConfigChannel>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800055c:	f000 f8fa 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b004      	add	sp, #16
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000028 	.word	0x20000028
 800056c:	40012400 	.word	0x40012400
 8000570:	10000010 	.word	0x10000010

08000574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000578:	4b23      	ldr	r3, [pc, #140]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 800057a:	4a24      	ldr	r2, [pc, #144]	@ (800060c <MX_USART1_UART_Init+0x98>)
 800057c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800057e:	4b22      	ldr	r3, [pc, #136]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 8000580:	22e1      	movs	r2, #225	@ 0xe1
 8000582:	0252      	lsls	r2, r2, #9
 8000584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b20      	ldr	r3, [pc, #128]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000592:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 fdd0 	bl	8002164 <HAL_UART_Init>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80005c8:	f000 f8c4 	bl	8000754 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 fa09 	bl	80029e8 <HAL_UARTEx_SetTxFifoThreshold>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80005da:	f000 f8bb 	bl	8000754 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005de:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	0018      	movs	r0, r3
 80005e4:	f002 fa40 	bl	8002a68 <HAL_UARTEx_SetRxFifoThreshold>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80005ec:	f000 f8b2 	bl	8000754 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <MX_USART1_UART_Init+0x94>)
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 f9be 	bl	8002974 <HAL_UARTEx_DisableFifoMode>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005fc:	f000 f8aa 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	2000008c 	.word	0x2000008c
 800060c:	40013800 	.word	0x40013800

08000610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 8000616:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <MX_USART2_UART_Init+0x64>)
 8000618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 800061c:	22e1      	movs	r2, #225	@ 0xe1
 800061e:	0252      	lsls	r2, r2, #9
 8000620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <MX_USART2_UART_Init+0x60>)
 800065a:	0018      	movs	r0, r3
 800065c:	f001 fd82 	bl	8002164 <HAL_UART_Init>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000664:	f000 f876 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000120 	.word	0x20000120
 8000674:	40004400 	.word	0x40004400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08b      	sub	sp, #44	@ 0x2c
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	2414      	movs	r4, #20
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2314      	movs	r3, #20
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f002 fa8d 	bl	8002ba8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <MX_GPIO_Init+0xd4>)
 8000690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000692:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <MX_GPIO_Init+0xd4>)
 8000694:	2104      	movs	r1, #4
 8000696:	430a      	orrs	r2, r1
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
 800069a:	4b2c      	ldr	r3, [pc, #176]	@ (800074c <MX_GPIO_Init+0xd4>)
 800069c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800069e:	2204      	movs	r2, #4
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	4b29      	ldr	r3, [pc, #164]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006aa:	4b28      	ldr	r3, [pc, #160]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006ac:	2120      	movs	r1, #32
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b2:	4b26      	ldr	r3, [pc, #152]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b6:	2220      	movs	r2, #32
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b23      	ldr	r3, [pc, #140]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c2:	4b22      	ldr	r3, [pc, #136]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006da:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006dc:	2102      	movs	r1, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_GPIO_Init+0xd4>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e6:	2202      	movs	r2, #2
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 80006ee:	23a0      	movs	r3, #160	@ 0xa0
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	2201      	movs	r2, #1
 80006f4:	2120      	movs	r1, #32
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 f8b6 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2204      	movs	r2, #4
 8000700:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800070e:	193b      	adds	r3, r7, r4
 8000710:	4a0f      	ldr	r2, [pc, #60]	@ (8000750 <MX_GPIO_Init+0xd8>)
 8000712:	0019      	movs	r1, r3
 8000714:	0010      	movs	r0, r2
 8000716:	f000 ff35 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 800071a:	0021      	movs	r1, r4
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2220      	movs	r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2201      	movs	r2, #1
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2203      	movs	r2, #3
 8000732:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000734:	187a      	adds	r2, r7, r1
 8000736:	23a0      	movs	r3, #160	@ 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f000 ff21 	bl	8001584 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b00b      	add	sp, #44	@ 0x2c
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	40021000 	.word	0x40021000
 8000750:	50001400 	.word	0x50001400

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_MspInit+0x44>)
 8000768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <HAL_MspInit+0x44>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	641a      	str	r2, [r3, #64]	@ 0x40
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_MspInit+0x44>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_MspInit+0x44>)
 8000780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_MspInit+0x44>)
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	0549      	lsls	r1, r1, #21
 8000788:	430a      	orrs	r2, r1
 800078a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_MspInit+0x44>)
 800078e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000790:	2380      	movs	r3, #128	@ 0x80
 8000792:	055b      	lsls	r3, r3, #21
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b091      	sub	sp, #68	@ 0x44
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	232c      	movs	r3, #44	@ 0x2c
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	0018      	movs	r0, r3
 80007b6:	2314      	movs	r3, #20
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f002 f9f4 	bl	8002ba8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	2410      	movs	r4, #16
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	0018      	movs	r0, r3
 80007c6:	231c      	movs	r3, #28
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f002 f9ec 	bl	8002ba8 <memset>
  if(hadc->Instance==ADC1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000854 <HAL_ADC_MspInit+0xac>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d138      	bne.n	800084c <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2220      	movs	r2, #32
 80007de:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fbcf 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80007f2:	f7ff ffaf 	bl	8000754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <HAL_ADC_MspInit+0xb0>)
 80007f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <HAL_ADC_MspInit+0xb0>)
 80007fc:	2180      	movs	r1, #128	@ 0x80
 80007fe:	0349      	lsls	r1, r1, #13
 8000800:	430a      	orrs	r2, r1
 8000802:	641a      	str	r2, [r3, #64]	@ 0x40
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <HAL_ADC_MspInit+0xb0>)
 8000806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	035b      	lsls	r3, r3, #13
 800080c:	4013      	ands	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_ADC_MspInit+0xb0>)
 8000814:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_ADC_MspInit+0xb0>)
 8000818:	2101      	movs	r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	635a      	str	r2, [r3, #52]	@ 0x34
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_ADC_MspInit+0xb0>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Joystick_Pin;
 800082a:	212c      	movs	r1, #44	@ 0x2c
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2210      	movs	r2, #16
 8000830:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2203      	movs	r2, #3
 8000836:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Joystick_GPIO_Port, &GPIO_InitStruct);
 800083e:	187a      	adds	r2, r7, r1
 8000840:	23a0      	movs	r3, #160	@ 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fe9c 	bl	8001584 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b011      	add	sp, #68	@ 0x44
 8000852:	bd90      	pop	{r4, r7, pc}
 8000854:	40012400 	.word	0x40012400
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b093      	sub	sp, #76	@ 0x4c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	2334      	movs	r3, #52	@ 0x34
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	0018      	movs	r0, r3
 800086a:	2314      	movs	r3, #20
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f002 f99a 	bl	8002ba8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	2418      	movs	r4, #24
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	231c      	movs	r3, #28
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f002 f992 	bl	8002ba8 <memset>
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <HAL_UART_MspInit+0x124>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d13e      	bne.n	800090c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089a:	193b      	adds	r3, r7, r4
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fb75 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008a6:	f7ff ff55 	bl	8000754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008aa:	4b36      	ldr	r3, [pc, #216]	@ (8000984 <HAL_UART_MspInit+0x128>)
 80008ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ae:	4b35      	ldr	r3, [pc, #212]	@ (8000984 <HAL_UART_MspInit+0x128>)
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	01c9      	lsls	r1, r1, #7
 80008b4:	430a      	orrs	r2, r1
 80008b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80008b8:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <HAL_UART_MspInit+0x128>)
 80008ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008bc:	2380      	movs	r3, #128	@ 0x80
 80008be:	01db      	lsls	r3, r3, #7
 80008c0:	4013      	ands	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000984 <HAL_UART_MspInit+0x128>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <HAL_UART_MspInit+0x128>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000984 <HAL_UART_MspInit+0x128>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008de:	2134      	movs	r1, #52	@ 0x34
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	22c0      	movs	r2, #192	@ 0xc0
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <HAL_UART_MspInit+0x12c>)
 8000902:	0019      	movs	r1, r3
 8000904:	0010      	movs	r0, r2
 8000906:	f000 fe3d 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090a:	e035      	b.n	8000978 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <HAL_UART_MspInit+0x130>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d130      	bne.n	8000978 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <HAL_UART_MspInit+0x128>)
 8000918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <HAL_UART_MspInit+0x128>)
 800091c:	2180      	movs	r1, #128	@ 0x80
 800091e:	0289      	lsls	r1, r1, #10
 8000920:	430a      	orrs	r2, r1
 8000922:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000924:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <HAL_UART_MspInit+0x128>)
 8000926:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	029b      	lsls	r3, r3, #10
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <HAL_UART_MspInit+0x128>)
 8000934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <HAL_UART_MspInit+0x128>)
 8000938:	2101      	movs	r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	@ 0x34
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <HAL_UART_MspInit+0x128>)
 8000940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000942:	2201      	movs	r2, #1
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800094a:	2134      	movs	r1, #52	@ 0x34
 800094c:	187b      	adds	r3, r7, r1
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2201      	movs	r2, #1
 8000968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	187a      	adds	r2, r7, r1
 800096c:	23a0      	movs	r3, #160	@ 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fe06 	bl	8001584 <HAL_GPIO_Init>
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b013      	add	sp, #76	@ 0x4c
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	40013800 	.word	0x40013800
 8000984:	40021000 	.word	0x40021000
 8000988:	50000400 	.word	0x50000400
 800098c:	40004400 	.word	0x40004400

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	e7fd      	b.n	8000994 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	e7fd      	b.n	800099c <HardFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f89a 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <SystemInit+0x14>)
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	0512      	lsls	r2, r2, #20
 80009ce:	609a      	str	r2, [r3, #8]
#endif
}
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e0:	f7ff fff0 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009e6:	e003      	b.n	80009f0 <LoopCopyDataInit>

080009e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009ee:	3104      	adds	r1, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009f0:	480a      	ldr	r0, [pc, #40]	@ (8000a1c <LoopForever+0xa>)
  ldr r3, =_edata
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <LoopForever+0xe>)
  adds r2, r0, r1
 80009f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009f8:	d3f6      	bcc.n	80009e8 <CopyDataInit>
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <LoopForever+0x12>)
  b LoopFillZerobss
 80009fc:	e002      	b.n	8000a04 <LoopFillZerobss>

080009fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a00:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a02:	3204      	adds	r2, #4

08000a04 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a04:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <LoopForever+0x16>)
  cmp r2, r3
 8000a06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a08:	d3f9      	bcc.n	80009fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a0a:	f002 f8d5 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0e:	f7ff fcf1 	bl	80003f4 <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   r0, =_estack
 8000a14:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000a18:	08002ca8 	.word	0x08002ca8
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a28:	200001b8 	.word	0x200001b8

08000a2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_IRQHandler>

08000a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 f80e 	bl	8000a5c <HAL_InitTick>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	e001      	b.n	8000a50 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a4c:	f7ff fe88 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
}
 8000a54:	0018      	movs	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b002      	add	sp, #8
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a64:	230f      	movs	r3, #15
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <HAL_InitTick+0x88>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d02b      	beq.n	8000acc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000a74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <HAL_InitTick+0x8c>)
 8000a76:	681c      	ldr	r4, [r3, #0]
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_InitTick+0x88>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	23fa      	movs	r3, #250	@ 0xfa
 8000a80:	0098      	lsls	r0, r3, #2
 8000a82:	f7ff fb41 	bl	8000108 <__udivsi3>
 8000a86:	0003      	movs	r3, r0
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f7ff fb3c 	bl	8000108 <__udivsi3>
 8000a90:	0003      	movs	r3, r0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fd69 	bl	800156a <HAL_SYSTICK_Config>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d112      	bne.n	8000ac2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d80a      	bhi.n	8000ab8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fd48 	bl	8001540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <HAL_InitTick+0x90>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	e00d      	b.n	8000ad4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e008      	b.n	8000ad4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e003      	b.n	8000ad4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000acc:	230f      	movs	r3, #15
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b005      	add	sp, #20
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	18d2      	adds	r2, r2, r3
 8000b00:	4b03      	ldr	r3, [pc, #12]	@ (8000b10 <HAL_IncTick+0x20>)
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	200001b4 	.word	0x200001b4

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	@ (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	200001b4 	.word	0x200001b4

08000b28 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000b38:	401a      	ands	r2, r3
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	ff3fffff 	.word	0xff3fffff

08000b50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	23c0      	movs	r3, #192	@ 0xc0
 8000b5e:	041b      	lsls	r3, r3, #16
 8000b60:	4013      	ands	r3, r2
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	400a      	ands	r2, r1
 8000b80:	2107      	movs	r1, #7
 8000b82:	4091      	lsls	r1, r2
 8000b84:	000a      	movs	r2, r1
 8000b86:	43d2      	mvns	r2, r2
 8000b88:	401a      	ands	r2, r3
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	400b      	ands	r3, r1
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	4099      	lsls	r1, r3
 8000b94:	000b      	movs	r3, r1
 8000b96:	431a      	orrs	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b004      	add	sp, #16
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	2107      	movs	r1, #7
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	000a      	movs	r2, r1
 8000bbe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000bc6:	40da      	lsrs	r2, r3
 8000bc8:	0013      	movs	r3, r2
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	211f      	movs	r1, #31
 8000be6:	400a      	ands	r2, r1
 8000be8:	210f      	movs	r1, #15
 8000bea:	4091      	lsls	r1, r2
 8000bec:	000a      	movs	r2, r1
 8000bee:	43d2      	mvns	r2, r2
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0e9b      	lsrs	r3, r3, #26
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	4019      	ands	r1, r3
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	201f      	movs	r0, #31
 8000bfe:	4003      	ands	r3, r0
 8000c00:	4099      	lsls	r1, r3
 8000c02:	000b      	movs	r3, r1
 8000c04:	431a      	orrs	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b004      	add	sp, #16
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	025b      	lsls	r3, r3, #9
 8000c24:	0a5b      	lsrs	r3, r3, #9
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	0252      	lsls	r2, r2, #9
 8000c46:	0a52      	lsrs	r2, r2, #9
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	0212      	lsls	r2, r2, #8
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	401a      	ands	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	400b      	ands	r3, r1
 8000c78:	4904      	ldr	r1, [pc, #16]	@ (8000c8c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000c7a:	400b      	ands	r3, r1
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b004      	add	sp, #16
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	7fffff00 	.word	0x7fffff00

08000c90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	0552      	lsls	r2, r2, #21
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	6fffffe8 	.word	0x6fffffe8

08000cb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	055b      	lsls	r3, r3, #21
 8000cc8:	401a      	ands	r2, r3
 8000cca:	2380      	movs	r3, #128	@ 0x80
 8000ccc:	055b      	lsls	r3, r3, #21
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d101      	bne.n	8000cd6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	2201      	movs	r2, #1
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d101      	bne.n	8000cf8 <LL_ADC_IsEnabled+0x18>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <LL_ADC_IsEnabled+0x1a>
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	4013      	ands	r3, r2
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d101      	bne.n	8000d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d2c:	231f      	movs	r3, #31
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e17e      	b.n	8001048 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10a      	bne.n	8000d68 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff fd27 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2254      	movs	r2, #84	@ 0x54
 8000d64:	2100      	movs	r1, #0
 8000d66:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffa3 	bl	8000cb8 <LL_ADC_IsInternalRegulatorEnabled>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d114      	bne.n	8000da0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff ff88 	bl	8000c90 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000d80:	4bb3      	ldr	r3, [pc, #716]	@ (8001050 <HAL_ADC_Init+0x32c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	49b3      	ldr	r1, [pc, #716]	@ (8001054 <HAL_ADC_Init+0x330>)
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff f9be 	bl	8000108 <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d92:	e002      	b.n	8000d9a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f9      	bne.n	8000d94 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ff87 	bl	8000cb8 <LL_ADC_IsInternalRegulatorEnabled>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d10f      	bne.n	8000dce <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	2210      	movs	r2, #16
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000dc6:	231f      	movs	r3, #31
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f7ff ff95 	bl	8000d02 <LL_ADC_REG_IsConversionOngoing>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	2210      	movs	r2, #16
 8000de2:	4013      	ands	r3, r2
 8000de4:	d000      	beq.n	8000de8 <HAL_ADC_Init+0xc4>
 8000de6:	e122      	b.n	800102e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d000      	beq.n	8000df0 <HAL_ADC_Init+0xcc>
 8000dee:	e11e      	b.n	800102e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df4:	4a98      	ldr	r2, [pc, #608]	@ (8001058 <HAL_ADC_Init+0x334>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	2202      	movs	r2, #2
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff6b 	bl	8000ce0 <LL_ADC_IsEnabled>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d000      	beq.n	8000e10 <HAL_ADC_Init+0xec>
 8000e0e:	e0ad      	b.n	8000f6c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e1b      	ldrb	r3, [r3, #24]
 8000e18:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e1a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7e5b      	ldrb	r3, [r3, #25]
 8000e20:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e22:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7e9b      	ldrb	r3, [r3, #26]
 8000e28:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e2a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <HAL_ADC_Init+0x116>
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	015b      	lsls	r3, r3, #5
 8000e38:	e000      	b.n	8000e3c <HAL_ADC_Init+0x118>
 8000e3a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e3c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e42:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	da04      	bge.n	8000e56 <HAL_ADC_Init+0x132>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	e001      	b.n	8000e5a <HAL_ADC_Init+0x136>
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000e5a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	212c      	movs	r1, #44	@ 0x2c
 8000e60:	5c5b      	ldrb	r3, [r3, r1]
 8000e62:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e64:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2220      	movs	r2, #32
 8000e70:	5c9b      	ldrb	r3, [r3, r2]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d115      	bne.n	8000ea2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7e9b      	ldrb	r3, [r3, #26]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d105      	bne.n	8000e8a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	2280      	movs	r2, #128	@ 0x80
 8000e82:	0252      	lsls	r2, r2, #9
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	e00b      	b.n	8000ea2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8e:	2220      	movs	r2, #32
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000eae:	23e0      	movs	r3, #224	@ 0xe0
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	4a65      	ldr	r2, [pc, #404]	@ (800105c <HAL_ADC_Init+0x338>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	0019      	movs	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	0f9b      	lsrs	r3, r3, #30
 8000edc:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	223c      	movs	r2, #60	@ 0x3c
 8000eee:	5c9b      	ldrb	r3, [r3, r2]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d111      	bne.n	8000f18 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	0f9b      	lsrs	r3, r3, #30
 8000efa:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f00:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f06:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f0c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	2201      	movs	r2, #1
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	4a50      	ldr	r2, [pc, #320]	@ (8001060 <HAL_ADC_Init+0x33c>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	0019      	movs	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	23c0      	movs	r3, #192	@ 0xc0
 8000f34:	061b      	lsls	r3, r3, #24
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d018      	beq.n	8000f6c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d012      	beq.n	8000f6c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	061b      	lsls	r3, r3, #24
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d00c      	beq.n	8000f6c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000f52:	4b44      	ldr	r3, [pc, #272]	@ (8001064 <HAL_ADC_Init+0x340>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a44      	ldr	r2, [pc, #272]	@ (8001068 <HAL_ADC_Init+0x344>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	23f0      	movs	r3, #240	@ 0xf0
 8000f62:	039b      	lsls	r3, r3, #14
 8000f64:	401a      	ands	r2, r3
 8000f66:	4b3f      	ldr	r3, [pc, #252]	@ (8001064 <HAL_ADC_Init+0x340>)
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f7ff fdf7 	bl	8000b6a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f84:	4939      	ldr	r1, [pc, #228]	@ (800106c <HAL_ADC_Init+0x348>)
 8000f86:	001a      	movs	r2, r3
 8000f88:	f7ff fdef 	bl	8000b6a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d109      	bne.n	8000fa8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4249      	negs	r1, r1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fa6:	e018      	b.n	8000fda <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	039b      	lsls	r3, r3, #14
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d112      	bne.n	8000fda <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	221c      	movs	r2, #28
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	4252      	negs	r2, r2
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0011      	movs	r1, r2
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2100      	movs	r1, #0
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff fddf 	bl	8000ba4 <LL_ADC_GetSamplingTimeCommonChannels>
 8000fe6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d10b      	bne.n	8001008 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4393      	bics	r3, r2
 8000ffe:	2201      	movs	r2, #1
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001006:	e01c      	b.n	8001042 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100c:	2212      	movs	r2, #18
 800100e:	4393      	bics	r3, r2
 8001010:	2210      	movs	r2, #16
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800101c:	2201      	movs	r2, #1
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001024:	231f      	movs	r3, #31
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800102c:	e009      	b.n	8001042 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	2210      	movs	r2, #16
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800103a:	231f      	movs	r3, #31
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	2201      	movs	r2, #1
 8001040:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001042:	231f      	movs	r3, #31
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b008      	add	sp, #32
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	00030d40 	.word	0x00030d40
 8001058:	fffffefd 	.word	0xfffffefd
 800105c:	ffde0201 	.word	0xffde0201
 8001060:	1ffffc02 	.word	0x1ffffc02
 8001064:	40012708 	.word	0x40012708
 8001068:	ffc3ffff 	.word	0xffc3ffff
 800106c:	7fffff04 	.word	0x7fffff04

08001070 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107a:	2317      	movs	r3, #23
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2254      	movs	r2, #84	@ 0x54
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x24>
 8001090:	2302      	movs	r3, #2
 8001092:	e1be      	b.n	8001412 <HAL_ADC_ConfigChannel+0x3a2>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2254      	movs	r2, #84	@ 0x54
 8001098:	2101      	movs	r1, #1
 800109a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fe2e 	bl	8000d02 <LL_ADC_REG_IsConversionOngoing>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d000      	beq.n	80010ac <HAL_ADC_ConfigChannel+0x3c>
 80010aa:	e1a1      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d100      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x46>
 80010b4:	e152      	b.n	800135c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	2380      	movs	r3, #128	@ 0x80
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	429a      	cmp	r2, r3
 80010c0:	d004      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80010c6:	4ac2      	ldr	r2, [pc, #776]	@ (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d108      	bne.n	80010de <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0019      	movs	r1, r3
 80010d6:	0010      	movs	r0, r2
 80010d8:	f7ff fd9b 	bl	8000c12 <LL_ADC_REG_SetSequencerChAdd>
 80010dc:	e0ed      	b.n	80012ba <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	211f      	movs	r1, #31
 80010e8:	400b      	ands	r3, r1
 80010ea:	210f      	movs	r1, #15
 80010ec:	4099      	lsls	r1, r3
 80010ee:	000b      	movs	r3, r1
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4013      	ands	r3, r2
 80010f4:	0019      	movs	r1, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	0a5b      	lsrs	r3, r3, #9
 80010fe:	d105      	bne.n	800110c <HAL_ADC_ConfigChannel+0x9c>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0e9b      	lsrs	r3, r3, #26
 8001106:	221f      	movs	r2, #31
 8001108:	4013      	ands	r3, r2
 800110a:	e0bc      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2201      	movs	r2, #1
 8001112:	4013      	ands	r3, r2
 8001114:	d000      	beq.n	8001118 <HAL_ADC_ConfigChannel+0xa8>
 8001116:	e0b5      	b.n	8001284 <HAL_ADC_ConfigChannel+0x214>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d000      	beq.n	8001124 <HAL_ADC_ConfigChannel+0xb4>
 8001122:	e0ad      	b.n	8001280 <HAL_ADC_ConfigChannel+0x210>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2204      	movs	r2, #4
 800112a:	4013      	ands	r3, r2
 800112c:	d000      	beq.n	8001130 <HAL_ADC_ConfigChannel+0xc0>
 800112e:	e0a5      	b.n	800127c <HAL_ADC_ConfigChannel+0x20c>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2208      	movs	r2, #8
 8001136:	4013      	ands	r3, r2
 8001138:	d000      	beq.n	800113c <HAL_ADC_ConfigChannel+0xcc>
 800113a:	e09d      	b.n	8001278 <HAL_ADC_ConfigChannel+0x208>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2210      	movs	r2, #16
 8001142:	4013      	ands	r3, r2
 8001144:	d000      	beq.n	8001148 <HAL_ADC_ConfigChannel+0xd8>
 8001146:	e095      	b.n	8001274 <HAL_ADC_ConfigChannel+0x204>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2220      	movs	r2, #32
 800114e:	4013      	ands	r3, r2
 8001150:	d000      	beq.n	8001154 <HAL_ADC_ConfigChannel+0xe4>
 8001152:	e08d      	b.n	8001270 <HAL_ADC_ConfigChannel+0x200>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2240      	movs	r2, #64	@ 0x40
 800115a:	4013      	ands	r3, r2
 800115c:	d000      	beq.n	8001160 <HAL_ADC_ConfigChannel+0xf0>
 800115e:	e085      	b.n	800126c <HAL_ADC_ConfigChannel+0x1fc>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2280      	movs	r2, #128	@ 0x80
 8001166:	4013      	ands	r3, r2
 8001168:	d000      	beq.n	800116c <HAL_ADC_ConfigChannel+0xfc>
 800116a:	e07d      	b.n	8001268 <HAL_ADC_ConfigChannel+0x1f8>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4013      	ands	r3, r2
 8001176:	d000      	beq.n	800117a <HAL_ADC_ConfigChannel+0x10a>
 8001178:	e074      	b.n	8001264 <HAL_ADC_ConfigChannel+0x1f4>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2380      	movs	r3, #128	@ 0x80
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4013      	ands	r3, r2
 8001184:	d000      	beq.n	8001188 <HAL_ADC_ConfigChannel+0x118>
 8001186:	e06b      	b.n	8001260 <HAL_ADC_ConfigChannel+0x1f0>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4013      	ands	r3, r2
 8001192:	d000      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x126>
 8001194:	e062      	b.n	800125c <HAL_ADC_ConfigChannel+0x1ec>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	2380      	movs	r3, #128	@ 0x80
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	4013      	ands	r3, r2
 80011a0:	d000      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x134>
 80011a2:	e059      	b.n	8001258 <HAL_ADC_ConfigChannel+0x1e8>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	015b      	lsls	r3, r3, #5
 80011ac:	4013      	ands	r3, r2
 80011ae:	d151      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1e4>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	@ 0x80
 80011b6:	019b      	lsls	r3, r3, #6
 80011b8:	4013      	ands	r3, r2
 80011ba:	d149      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1e0>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	@ 0x80
 80011c2:	01db      	lsls	r3, r3, #7
 80011c4:	4013      	ands	r3, r2
 80011c6:	d141      	bne.n	800124c <HAL_ADC_ConfigChannel+0x1dc>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	4013      	ands	r3, r2
 80011d2:	d139      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x1d8>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	025b      	lsls	r3, r3, #9
 80011dc:	4013      	ands	r3, r2
 80011de:	d131      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1d4>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4013      	ands	r3, r2
 80011ea:	d129      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1d0>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	02db      	lsls	r3, r3, #11
 80011f4:	4013      	ands	r3, r2
 80011f6:	d121      	bne.n	800123c <HAL_ADC_ConfigChannel+0x1cc>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	031b      	lsls	r3, r3, #12
 8001200:	4013      	ands	r3, r2
 8001202:	d119      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1c8>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	035b      	lsls	r3, r3, #13
 800120c:	4013      	ands	r3, r2
 800120e:	d111      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x1c4>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	039b      	lsls	r3, r3, #14
 8001218:	4013      	ands	r3, r2
 800121a:	d109      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1c0>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	03db      	lsls	r3, r3, #15
 8001224:	4013      	ands	r3, r2
 8001226:	d001      	beq.n	800122c <HAL_ADC_ConfigChannel+0x1bc>
 8001228:	2316      	movs	r3, #22
 800122a:	e02c      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 800122c:	2300      	movs	r3, #0
 800122e:	e02a      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001230:	2315      	movs	r3, #21
 8001232:	e028      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001234:	2314      	movs	r3, #20
 8001236:	e026      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001238:	2313      	movs	r3, #19
 800123a:	e024      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 800123c:	2312      	movs	r3, #18
 800123e:	e022      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001240:	2311      	movs	r3, #17
 8001242:	e020      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001244:	2310      	movs	r3, #16
 8001246:	e01e      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001248:	230f      	movs	r3, #15
 800124a:	e01c      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 800124c:	230e      	movs	r3, #14
 800124e:	e01a      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001250:	230d      	movs	r3, #13
 8001252:	e018      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001254:	230c      	movs	r3, #12
 8001256:	e016      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001258:	230b      	movs	r3, #11
 800125a:	e014      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 800125c:	230a      	movs	r3, #10
 800125e:	e012      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001260:	2309      	movs	r3, #9
 8001262:	e010      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001264:	2308      	movs	r3, #8
 8001266:	e00e      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001268:	2307      	movs	r3, #7
 800126a:	e00c      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 800126c:	2306      	movs	r3, #6
 800126e:	e00a      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001270:	2305      	movs	r3, #5
 8001272:	e008      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001274:	2304      	movs	r3, #4
 8001276:	e006      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001278:	2303      	movs	r3, #3
 800127a:	e004      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 800127c:	2302      	movs	r3, #2
 800127e:	e002      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_ADC_ConfigChannel+0x216>
 8001284:	2300      	movs	r3, #0
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	6852      	ldr	r2, [r2, #4]
 800128a:	201f      	movs	r0, #31
 800128c:	4002      	ands	r2, r0
 800128e:	4093      	lsls	r3, r2
 8001290:	000a      	movs	r2, r1
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d808      	bhi.n	80012ba <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	6859      	ldr	r1, [r3, #4]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	001a      	movs	r2, r3
 80012b6:	f7ff fc8c 	bl	8000bd2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	6819      	ldr	r1, [r3, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	001a      	movs	r2, r3
 80012c8:	f7ff fcc6 	bl	8000c58 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db00      	blt.n	80012d6 <HAL_ADC_ConfigChannel+0x266>
 80012d4:	e096      	b.n	8001404 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012d6:	4b3f      	ldr	r3, [pc, #252]	@ (80013d4 <HAL_ADC_ConfigChannel+0x364>)
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff fc39 	bl	8000b50 <LL_ADC_GetCommonPathInternalCh>
 80012de:	0003      	movs	r3, r0
 80012e0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a3c      	ldr	r2, [pc, #240]	@ (80013d8 <HAL_ADC_ConfigChannel+0x368>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d123      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012f4:	d11e      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	2280      	movs	r2, #128	@ 0x80
 80012fa:	0412      	lsls	r2, r2, #16
 80012fc:	4313      	orrs	r3, r2
 80012fe:	4a35      	ldr	r2, [pc, #212]	@ (80013d4 <HAL_ADC_ConfigChannel+0x364>)
 8001300:	0019      	movs	r1, r3
 8001302:	0010      	movs	r0, r2
 8001304:	f7ff fc10 	bl	8000b28 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001308:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <HAL_ADC_ConfigChannel+0x36c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4934      	ldr	r1, [pc, #208]	@ (80013e0 <HAL_ADC_ConfigChannel+0x370>)
 800130e:	0018      	movs	r0, r3
 8001310:	f7fe fefa 	bl	8000108 <__udivsi3>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	189b      	adds	r3, r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	3301      	adds	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001324:	e002      	b.n	800132c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3b01      	subs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f9      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001332:	e067      	b.n	8001404 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a2a      	ldr	r2, [pc, #168]	@ (80013e4 <HAL_ADC_ConfigChannel+0x374>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d162      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	03db      	lsls	r3, r3, #15
 8001344:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001346:	d15d      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2280      	movs	r2, #128	@ 0x80
 800134c:	03d2      	lsls	r2, r2, #15
 800134e:	4313      	orrs	r3, r2
 8001350:	4a20      	ldr	r2, [pc, #128]	@ (80013d4 <HAL_ADC_ConfigChannel+0x364>)
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f7ff fbe7 	bl	8000b28 <LL_ADC_SetCommonPathInternalCh>
 800135a:	e053      	b.n	8001404 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	061b      	lsls	r3, r3, #24
 8001364:	429a      	cmp	r2, r3
 8001366:	d004      	beq.n	8001372 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800136c:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <HAL_ADC_ConfigChannel+0x360>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d107      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0019      	movs	r1, r3
 800137c:	0010      	movs	r0, r2
 800137e:	f7ff fc59 	bl	8000c34 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da3c      	bge.n	8001404 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_ADC_ConfigChannel+0x364>)
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff fbdf 	bl	8000b50 <LL_ADC_GetCommonPathInternalCh>
 8001392:	0003      	movs	r3, r0
 8001394:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_ADC_ConfigChannel+0x368>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d108      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_ADC_ConfigChannel+0x378>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_ADC_ConfigChannel+0x364>)
 80013a8:	0019      	movs	r1, r3
 80013aa:	0010      	movs	r0, r2
 80013ac:	f7ff fbbc 	bl	8000b28 <LL_ADC_SetCommonPathInternalCh>
 80013b0:	e028      	b.n	8001404 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_ADC_ConfigChannel+0x374>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d123      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <HAL_ADC_ConfigChannel+0x37c>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_ADC_ConfigChannel+0x364>)
 80013c4:	0019      	movs	r1, r3
 80013c6:	0010      	movs	r0, r2
 80013c8:	f7ff fbae 	bl	8000b28 <LL_ADC_SetCommonPathInternalCh>
 80013cc:	e01a      	b.n	8001404 <HAL_ADC_ConfigChannel+0x394>
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	80000004 	.word	0x80000004
 80013d4:	40012708 	.word	0x40012708
 80013d8:	a4000200 	.word	0xa4000200
 80013dc:	20000000 	.word	0x20000000
 80013e0:	00030d40 	.word	0x00030d40
 80013e4:	a8000400 	.word	0xa8000400
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f4:	2220      	movs	r2, #32
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80013fc:	2317      	movs	r3, #23
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2254      	movs	r2, #84	@ 0x54
 8001408:	2100      	movs	r1, #0
 800140a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800140c:	2317      	movs	r3, #23
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	781b      	ldrb	r3, [r3, #0]
}
 8001412:	0018      	movs	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	b006      	add	sp, #24
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	0002      	movs	r2, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001430:	d828      	bhi.n	8001484 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001432:	4a2f      	ldr	r2, [pc, #188]	@ (80014f0 <__NVIC_SetPriority+0xd4>)
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	33c0      	adds	r3, #192	@ 0xc0
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	589b      	ldr	r3, [r3, r2]
 8001442:	1dfa      	adds	r2, r7, #7
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	0011      	movs	r1, r2
 8001448:	2203      	movs	r2, #3
 800144a:	400a      	ands	r2, r1
 800144c:	00d2      	lsls	r2, r2, #3
 800144e:	21ff      	movs	r1, #255	@ 0xff
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	43d2      	mvns	r2, r2
 8001456:	401a      	ands	r2, r3
 8001458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	22ff      	movs	r2, #255	@ 0xff
 8001460:	401a      	ands	r2, r3
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	2303      	movs	r3, #3
 800146a:	4003      	ands	r3, r0
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001470:	481f      	ldr	r0, [pc, #124]	@ (80014f0 <__NVIC_SetPriority+0xd4>)
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b25b      	sxtb	r3, r3
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	430a      	orrs	r2, r1
 800147c:	33c0      	adds	r3, #192	@ 0xc0
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001482:	e031      	b.n	80014e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001484:	4a1b      	ldr	r2, [pc, #108]	@ (80014f4 <__NVIC_SetPriority+0xd8>)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	0019      	movs	r1, r3
 800148c:	230f      	movs	r3, #15
 800148e:	400b      	ands	r3, r1
 8001490:	3b08      	subs	r3, #8
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3306      	adds	r3, #6
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	18d3      	adds	r3, r2, r3
 800149a:	3304      	adds	r3, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1dfa      	adds	r2, r7, #7
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	0011      	movs	r1, r2
 80014a4:	2203      	movs	r2, #3
 80014a6:	400a      	ands	r2, r1
 80014a8:	00d2      	lsls	r2, r2, #3
 80014aa:	21ff      	movs	r1, #255	@ 0xff
 80014ac:	4091      	lsls	r1, r2
 80014ae:	000a      	movs	r2, r1
 80014b0:	43d2      	mvns	r2, r2
 80014b2:	401a      	ands	r2, r3
 80014b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	22ff      	movs	r2, #255	@ 0xff
 80014bc:	401a      	ands	r2, r3
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	0018      	movs	r0, r3
 80014c4:	2303      	movs	r3, #3
 80014c6:	4003      	ands	r3, r0
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014cc:	4809      	ldr	r0, [pc, #36]	@ (80014f4 <__NVIC_SetPriority+0xd8>)
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	001c      	movs	r4, r3
 80014d4:	230f      	movs	r3, #15
 80014d6:	4023      	ands	r3, r4
 80014d8:	3b08      	subs	r3, #8
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	430a      	orrs	r2, r1
 80014de:	3306      	adds	r3, #6
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	18c3      	adds	r3, r0, r3
 80014e4:	3304      	adds	r3, #4
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b003      	add	sp, #12
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1e5a      	subs	r2, r3, #1
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	045b      	lsls	r3, r3, #17
 8001508:	429a      	cmp	r2, r3
 800150a:	d301      	bcc.n	8001510 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150c:	2301      	movs	r3, #1
 800150e:	e010      	b.n	8001532 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <SysTick_Config+0x44>)
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	3a01      	subs	r2, #1
 8001516:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001518:	2301      	movs	r3, #1
 800151a:	425b      	negs	r3, r3
 800151c:	2103      	movs	r1, #3
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff ff7c 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <SysTick_Config+0x44>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <SysTick_Config+0x44>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	210f      	movs	r1, #15
 800154c:	187b      	adds	r3, r7, r1
 800154e:	1c02      	adds	r2, r0, #0
 8001550:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	187b      	adds	r3, r7, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b25b      	sxtb	r3, r3
 800155a:	0011      	movs	r1, r2
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff ffbf 	bl	80014f8 <SysTick_Config>
 800157a:	0003      	movs	r3, r0
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001592:	e153      	b.n	800183c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2101      	movs	r1, #1
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4091      	lsls	r1, r2
 800159e:	000a      	movs	r2, r1
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d100      	bne.n	80015ac <HAL_GPIO_Init+0x28>
 80015aa:	e144      	b.n	8001836 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x38>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b12      	cmp	r3, #18
 80015ba:	d125      	bne.n	8001608 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	08da      	lsrs	r2, r3, #3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3208      	adds	r2, #8
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	58d3      	ldr	r3, [r2, r3]
 80015c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	2207      	movs	r2, #7
 80015ce:	4013      	ands	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	220f      	movs	r2, #15
 80015d4:	409a      	lsls	r2, r3
 80015d6:	0013      	movs	r3, r2
 80015d8:	43da      	mvns	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	4013      	ands	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	220f      	movs	r2, #15
 80015e6:	401a      	ands	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2107      	movs	r1, #7
 80015ec:	400b      	ands	r3, r1
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	6979      	ldr	r1, [r7, #20]
 8001606:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	43da      	mvns	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	4013      	ands	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2203      	movs	r2, #3
 8001626:	401a      	ands	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	409a      	lsls	r2, r3
 800162e:	0013      	movs	r3, r2
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4313      	orrs	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d00b      	beq.n	800165c <HAL_GPIO_Init+0xd8>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001650:	2b11      	cmp	r3, #17
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b12      	cmp	r3, #18
 800165a:	d130      	bne.n	80016be <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	409a      	lsls	r2, r3
 800166a:	0013      	movs	r3, r2
 800166c:	43da      	mvns	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	4013      	ands	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	4313      	orrs	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001692:	2201      	movs	r2, #1
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	43da      	mvns	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4013      	ands	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	2201      	movs	r2, #1
 80016aa:	401a      	ands	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	409a      	lsls	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d017      	beq.n	80016f6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	43da      	mvns	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4013      	ands	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	2380      	movs	r3, #128	@ 0x80
 80016fc:	055b      	lsls	r3, r3, #21
 80016fe:	4013      	ands	r3, r2
 8001700:	d100      	bne.n	8001704 <HAL_GPIO_Init+0x180>
 8001702:	e098      	b.n	8001836 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001704:	4a53      	ldr	r2, [pc, #332]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3318      	adds	r3, #24
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	589b      	ldr	r3, [r3, r2]
 8001710:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2203      	movs	r2, #3
 8001716:	4013      	ands	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	220f      	movs	r2, #15
 800171c:	409a      	lsls	r2, r3
 800171e:	0013      	movs	r3, r2
 8001720:	43da      	mvns	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4013      	ands	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	23a0      	movs	r3, #160	@ 0xa0
 800172c:	05db      	lsls	r3, r3, #23
 800172e:	429a      	cmp	r2, r3
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x1e2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a48      	ldr	r2, [pc, #288]	@ (8001858 <HAL_GPIO_Init+0x2d4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x1de>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a47      	ldr	r2, [pc, #284]	@ (800185c <HAL_GPIO_Init+0x2d8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x1da>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a46      	ldr	r2, [pc, #280]	@ (8001860 <HAL_GPIO_Init+0x2dc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x1d6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a45      	ldr	r2, [pc, #276]	@ (8001864 <HAL_GPIO_Init+0x2e0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x1d2>
 8001752:	2305      	movs	r3, #5
 8001754:	e008      	b.n	8001768 <HAL_GPIO_Init+0x1e4>
 8001756:	2306      	movs	r3, #6
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x1e4>
 800175a:	2303      	movs	r3, #3
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x1e4>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x1e4>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x1e4>
 8001766:	2300      	movs	r3, #0
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	2103      	movs	r1, #3
 800176c:	400a      	ands	r2, r1
 800176e:	00d2      	lsls	r2, r2, #3
 8001770:	4093      	lsls	r3, r2
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001778:	4936      	ldr	r1, [pc, #216]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3318      	adds	r3, #24
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001786:	4a33      	ldr	r2, [pc, #204]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	58d3      	ldr	r3, [r2, r3]
 800178c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43da      	mvns	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	025b      	lsls	r3, r3, #9
 80017a0:	4013      	ands	r3, r2
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80017ac:	4929      	ldr	r1, [pc, #164]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017ae:	2280      	movs	r2, #128	@ 0x80
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80017b4:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017b6:	2384      	movs	r3, #132	@ 0x84
 80017b8:	58d3      	ldr	r3, [r2, r3]
 80017ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43da      	mvns	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	4013      	ands	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	2380      	movs	r3, #128	@ 0x80
 80017cc:	029b      	lsls	r3, r3, #10
 80017ce:	4013      	ands	r3, r2
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80017da:	491e      	ldr	r1, [pc, #120]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017dc:	2284      	movs	r2, #132	@ 0x84
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43da      	mvns	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	4013      	ands	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	035b      	lsls	r3, r3, #13
 80017fa:	4013      	ands	r3, r2
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43da      	mvns	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	039b      	lsls	r3, r3, #14
 8001824:	4013      	ands	r3, r2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_GPIO_Init+0x2d0>)
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3301      	adds	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	40da      	lsrs	r2, r3
 8001844:	1e13      	subs	r3, r2, #0
 8001846:	d000      	beq.n	800184a <HAL_GPIO_Init+0x2c6>
 8001848:	e6a4      	b.n	8001594 <HAL_GPIO_Init+0x10>
  }
}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	46c0      	nop			@ (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b006      	add	sp, #24
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021800 	.word	0x40021800
 8001858:	50000400 	.word	0x50000400
 800185c:	50000800 	.word	0x50000800
 8001860:	50000c00 	.word	0x50000c00
 8001864:	50001400 	.word	0x50001400

08001868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	0008      	movs	r0, r1
 8001872:	0011      	movs	r1, r2
 8001874:	1cbb      	adds	r3, r7, #2
 8001876:	1c02      	adds	r2, r0, #0
 8001878:	801a      	strh	r2, [r3, #0]
 800187a:	1c7b      	adds	r3, r7, #1
 800187c:	1c0a      	adds	r2, r1, #0
 800187e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001880:	1c7b      	adds	r3, r7, #1
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001888:	1cbb      	adds	r3, r7, #2
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001890:	e003      	b.n	800189a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001892:	1cbb      	adds	r3, r7, #2
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e1d0      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	d100      	bne.n	80018c2 <HAL_RCC_OscConfig+0x1e>
 80018c0:	e069      	b.n	8001996 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c2:	4bc8      	ldr	r3, [pc, #800]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2238      	movs	r2, #56	@ 0x38
 80018c8:	4013      	ands	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d105      	bne.n	80018de <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d15d      	bne.n	8001996 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1bc      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	025b      	lsls	r3, r3, #9
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_OscConfig+0x56>
 80018ea:	4bbe      	ldr	r3, [pc, #760]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4bbd      	ldr	r3, [pc, #756]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80018f0:	2180      	movs	r1, #128	@ 0x80
 80018f2:	0249      	lsls	r1, r1, #9
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e020      	b.n	800193c <HAL_RCC_OscConfig+0x98>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	23a0      	movs	r3, #160	@ 0xa0
 8001900:	02db      	lsls	r3, r3, #11
 8001902:	429a      	cmp	r2, r3
 8001904:	d10e      	bne.n	8001924 <HAL_RCC_OscConfig+0x80>
 8001906:	4bb7      	ldr	r3, [pc, #732]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4bb6      	ldr	r3, [pc, #728]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	02c9      	lsls	r1, r1, #11
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	4bb3      	ldr	r3, [pc, #716]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4bb2      	ldr	r3, [pc, #712]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 800191a:	2180      	movs	r1, #128	@ 0x80
 800191c:	0249      	lsls	r1, r1, #9
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x98>
 8001924:	4baf      	ldr	r3, [pc, #700]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4bae      	ldr	r3, [pc, #696]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 800192a:	49af      	ldr	r1, [pc, #700]	@ (8001be8 <HAL_RCC_OscConfig+0x344>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	4bac      	ldr	r3, [pc, #688]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4bab      	ldr	r3, [pc, #684]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001936:	49ad      	ldr	r1, [pc, #692]	@ (8001bec <HAL_RCC_OscConfig+0x348>)
 8001938:	400a      	ands	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d014      	beq.n	800196e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f8e6 	bl	8000b14 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800194e:	f7ff f8e1 	bl	8000b14 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	@ 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e17b      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001960:	4ba0      	ldr	r3, [pc, #640]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0xaa>
 800196c:	e013      	b.n	8001996 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f8d1 	bl	8000b14 <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001978:	f7ff f8cc 	bl	8000b14 <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	@ 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e166      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198a:	4b96      	ldr	r3, [pc, #600]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	4013      	ands	r3, r2
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2202      	movs	r2, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d100      	bne.n	80019a2 <HAL_RCC_OscConfig+0xfe>
 80019a0:	e086      	b.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a2:	4b90      	ldr	r3, [pc, #576]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2238      	movs	r2, #56	@ 0x38
 80019a8:	4013      	ands	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d12f      	bne.n	8001a12 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e14c      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b89      	ldr	r3, [pc, #548]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a8b      	ldr	r2, [pc, #556]	@ (8001bf0 <HAL_RCC_OscConfig+0x34c>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	021a      	lsls	r2, r3, #8
 80019ce:	4b85      	ldr	r3, [pc, #532]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d112      	bne.n	8001a00 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019da:	4b82      	ldr	r3, [pc, #520]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a85      	ldr	r2, [pc, #532]	@ (8001bf4 <HAL_RCC_OscConfig+0x350>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	4b7e      	ldr	r3, [pc, #504]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019ee:	4b7d      	ldr	r3, [pc, #500]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0adb      	lsrs	r3, r3, #11
 80019f4:	2207      	movs	r2, #7
 80019f6:	4013      	ands	r3, r2
 80019f8:	4a7f      	ldr	r2, [pc, #508]	@ (8001bf8 <HAL_RCC_OscConfig+0x354>)
 80019fa:	40da      	lsrs	r2, r3
 80019fc:	4b7f      	ldr	r3, [pc, #508]	@ (8001bfc <HAL_RCC_OscConfig+0x358>)
 80019fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a00:	4b7f      	ldr	r3, [pc, #508]	@ (8001c00 <HAL_RCC_OscConfig+0x35c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff f829 	bl	8000a5c <HAL_InitTick>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d050      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e122      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d030      	beq.n	8001a7c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a1a:	4b72      	ldr	r3, [pc, #456]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	@ (8001bf4 <HAL_RCC_OscConfig+0x350>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	4b6e      	ldr	r3, [pc, #440]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b6c      	ldr	r3, [pc, #432]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a34:	2180      	movs	r1, #128	@ 0x80
 8001a36:	0049      	lsls	r1, r1, #1
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f86a 	bl	8000b14 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a46:	f7ff f865 	bl	8000b14 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0ff      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	4b62      	ldr	r3, [pc, #392]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4013      	ands	r3, r2
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b5f      	ldr	r3, [pc, #380]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a61      	ldr	r2, [pc, #388]	@ (8001bf0 <HAL_RCC_OscConfig+0x34c>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	021a      	lsls	r2, r3, #8
 8001a74:	4b5b      	ldr	r3, [pc, #364]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	e019      	b.n	8001ab0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001a7c:	4b59      	ldr	r3, [pc, #356]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b58      	ldr	r3, [pc, #352]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001a82:	4960      	ldr	r1, [pc, #384]	@ (8001c04 <HAL_RCC_OscConfig+0x360>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f844 	bl	8000b14 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a92:	f7ff f83f 	bl	8000b14 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0d9      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	@ 0x80
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4013      	ands	r3, r2
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d042      	beq.n	8001b40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001aba:	4b4a      	ldr	r3, [pc, #296]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2238      	movs	r2, #56	@ 0x38
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b18      	cmp	r3, #24
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d138      	bne.n	8001b40 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0c2      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d019      	beq.n	8001b0e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ada:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001adc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f815 	bl	8000b14 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001af0:	f7ff f810 	bl	8000b14 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0aa      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d0f1      	beq.n	8001af0 <HAL_RCC_OscConfig+0x24c>
 8001b0c:	e018      	b.n	8001b40 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b0e:	4b35      	ldr	r3, [pc, #212]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	438a      	bics	r2, r1
 8001b18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7fe fffb 	bl	8000b14 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b24:	f7fe fff6 	bl	8000b14 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e090      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d1f1      	bne.n	8001b24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2204      	movs	r2, #4
 8001b46:	4013      	ands	r3, r2
 8001b48:	d100      	bne.n	8001b4c <HAL_RCC_OscConfig+0x2a8>
 8001b4a:	e084      	b.n	8001c56 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b54:	4b23      	ldr	r3, [pc, #140]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2238      	movs	r2, #56	@ 0x38
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d000      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2c6>
 8001b68:	e075      	b.n	8001c56 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e074      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2e0>
 8001b76:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b82:	e01c      	b.n	8001bbe <HAL_RCC_OscConfig+0x31a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x302>
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b92:	2104      	movs	r1, #4
 8001b94:	430a      	orrs	r2, r1
 8001b96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ba4:	e00b      	b.n	8001bbe <HAL_RCC_OscConfig+0x31a>
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	438a      	bics	r2, r1
 8001bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001bb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_RCC_OscConfig+0x340>)
 8001bb8:	2104      	movs	r1, #4
 8001bba:	438a      	bics	r2, r1
 8001bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d028      	beq.n	8001c18 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ffa5 	bl	8000b14 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd0:	f7fe ffa0 	bl	8000b14 <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	4a0b      	ldr	r2, [pc, #44]	@ (8001c08 <HAL_RCC_OscConfig+0x364>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d915      	bls.n	8001c0c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e039      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
 8001be4:	40021000 	.word	0x40021000
 8001be8:	fffeffff 	.word	0xfffeffff
 8001bec:	fffbffff 	.word	0xfffbffff
 8001bf0:	ffff80ff 	.word	0xffff80ff
 8001bf4:	ffffc7ff 	.word	0xffffc7ff
 8001bf8:	02dc6c00 	.word	0x02dc6c00
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000004 	.word	0x20000004
 8001c04:	fffffeff 	.word	0xfffffeff
 8001c08:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_RCC_OscConfig+0x3bc>)
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d0dc      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x32c>
 8001c16:	e013      	b.n	8001c40 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe ff7c 	bl	8000b14 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001c20:	e009      	b.n	8001c36 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe ff77 	bl	8000b14 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <HAL_RCC_OscConfig+0x3c0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e010      	b.n	8001c58 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <HAL_RCC_OscConfig+0x3bc>)
 8001c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c40:	230f      	movs	r3, #15
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d105      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_OscConfig+0x3bc>)
 8001c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c4e:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <HAL_RCC_OscConfig+0x3bc>)
 8001c50:	4905      	ldr	r1, [pc, #20]	@ (8001c68 <HAL_RCC_OscConfig+0x3c4>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b006      	add	sp, #24
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	00001388 	.word	0x00001388
 8001c68:	efffffff 	.word	0xefffffff

08001c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0e9      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b76      	ldr	r3, [pc, #472]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2207      	movs	r2, #7
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d91e      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b73      	ldr	r3, [pc, #460]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2207      	movs	r2, #7
 8001c94:	4393      	bics	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	4b70      	ldr	r3, [pc, #448]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ca0:	f7fe ff38 	bl	8000b14 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001caa:	f7fe ff33 	bl	8000b14 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0ca      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cbe:	4b67      	ldr	r3, [pc, #412]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1ee      	bne.n	8001caa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d017      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ce0:	4b60      	ldr	r3, [pc, #384]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4a60      	ldr	r2, [pc, #384]	@ (8001e68 <HAL_RCC_ClockConfig+0x1fc>)
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001cea:	21b0      	movs	r1, #176	@ 0xb0
 8001cec:	0109      	lsls	r1, r1, #4
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4a5d      	ldr	r2, [pc, #372]	@ (8001e6c <HAL_RCC_ClockConfig+0x200>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b58      	ldr	r3, [pc, #352]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d055      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001d10:	4b54      	ldr	r3, [pc, #336]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	221c      	movs	r2, #28
 8001d16:	4393      	bics	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	4b51      	ldr	r3, [pc, #324]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	4013      	ands	r3, r2
 8001d36:	d11f      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e08b      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d44:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d113      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e07f      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001d5c:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e074      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e06d      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d8c:	f7fe fec2 	bl	8000b14 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	e009      	b.n	8001daa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7fe febd 	bl	8000b14 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	4a2f      	ldr	r2, [pc, #188]	@ (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e054      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2238      	movs	r2, #56	@ 0x38
 8001db0:	401a      	ands	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1ec      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d21e      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2207      	movs	r2, #7
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fe9a 	bl	8000b14 <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001de6:	f7fe fe95 	bl	8000b14 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_RCC_ClockConfig+0x1f4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e02c      	b.n	8001e54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2207      	movs	r2, #7
 8001e00:	4013      	ands	r3, r2
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4a16      	ldr	r2, [pc, #88]	@ (8001e70 <HAL_RCC_ClockConfig+0x204>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e26:	f000 f82b 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e2a:	0001      	movs	r1, r0
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	220f      	movs	r2, #15
 8001e34:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_RCC_ClockConfig+0x208>)
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e40:	000a      	movs	r2, r1
 8001e42:	40da      	lsrs	r2, r3
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_RCC_ClockConfig+0x20c>)
 8001e46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e48:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <HAL_RCC_ClockConfig+0x210>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7fe fe05 	bl	8000a5c <HAL_InitTick>
 8001e52:	0003      	movs	r3, r0
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b004      	add	sp, #16
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	00001388 	.word	0x00001388
 8001e64:	40021000 	.word	0x40021000
 8001e68:	ffff84ff 	.word	0xffff84ff
 8001e6c:	fffff0ff 	.word	0xfffff0ff
 8001e70:	ffff8fff 	.word	0xffff8fff
 8001e74:	08002c18 	.word	0x08002c18
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001e86:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	4013      	ands	r3, r2
 8001e90:	3301      	adds	r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e94:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2238      	movs	r2, #56	@ 0x38
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d10f      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0adb      	lsrs	r3, r3, #11
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	0013      	movs	r3, r2
 8001eae:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4819      	ldr	r0, [pc, #100]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eb4:	f7fe f928 	bl	8000108 <__udivsi3>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e01e      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2238      	movs	r2, #56	@ 0x38
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eca:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e015      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ed0:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2238      	movs	r2, #56	@ 0x38
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d103      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2238      	movs	r2, #56	@ 0x38
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b18      	cmp	r3, #24
 8001eee:	d103      	bne.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ef0:	23fa      	movs	r3, #250	@ 0xfa
 8001ef2:	01db      	lsls	r3, r3, #7
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e001      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe f902 	bl	8000108 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b004      	add	sp, #16
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	40021000 	.word	0x40021000
 8001f18:	02dc6c00 	.word	0x02dc6c00
 8001f1c:	007a1200 	.word	0x007a1200

08001f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f24:	f7ff ffac 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001f28:	0001      	movs	r1, r0
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_GetHCLKFreq+0x30>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	220f      	movs	r2, #15
 8001f32:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <HAL_RCC_GetHCLKFreq+0x34>)
 8001f36:	0092      	lsls	r2, r2, #2
 8001f38:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f3a:	221f      	movs	r2, #31
 8001f3c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f3e:	000a      	movs	r2, r1
 8001f40:	40da      	lsrs	r2, r3
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_RCC_GetHCLKFreq+0x38>)
 8001f44:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001f46:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <HAL_RCC_GetHCLKFreq+0x38>)
 8001f48:	681b      	ldr	r3, [r3, #0]
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08002c18 	.word	0x08002c18
 8001f58:	20000000 	.word	0x20000000

08001f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f64:	0001      	movs	r1, r0
 8001f66:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0b1b      	lsrs	r3, r3, #12
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	401a      	ands	r2, r3
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	58d3      	ldr	r3, [r2, r3]
 8001f76:	221f      	movs	r2, #31
 8001f78:	4013      	ands	r3, r2
 8001f7a:	40d9      	lsrs	r1, r3
 8001f7c:	000b      	movs	r3, r1
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08002c58 	.word	0x08002c58

08001f8c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f94:	2313      	movs	r3, #19
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2240      	movs	r2, #64	@ 0x40
 8001faa:	4013      	ands	r3, r2
 8001fac:	d100      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001fae:	e079      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb0:	2011      	movs	r0, #17
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb8:	4b63      	ldr	r3, [pc, #396]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	055b      	lsls	r3, r3, #21
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d110      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	4b60      	ldr	r3, [pc, #384]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fca:	2180      	movs	r1, #128	@ 0x80
 8001fcc:	0549      	lsls	r1, r1, #21
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	055b      	lsls	r3, r3, #21
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe0:	183b      	adds	r3, r7, r0
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001fe6:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fe8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fea:	23c0      	movs	r3, #192	@ 0xc0
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d019      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d014      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002002:	4b51      	ldr	r3, [pc, #324]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002006:	4a51      	ldr	r2, [pc, #324]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002008:	4013      	ands	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800200c:	4b4e      	ldr	r3, [pc, #312]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800200e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002010:	4b4d      	ldr	r3, [pc, #308]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002012:	2180      	movs	r1, #128	@ 0x80
 8002014:	0249      	lsls	r1, r1, #9
 8002016:	430a      	orrs	r2, r1
 8002018:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800201a:	4b4b      	ldr	r3, [pc, #300]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800201c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800201e:	4b4a      	ldr	r3, [pc, #296]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002020:	494b      	ldr	r1, [pc, #300]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002022:	400a      	ands	r2, r1
 8002024:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002026:	4b48      	ldr	r3, [pc, #288]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	d016      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7fe fd6e 	bl	8000b14 <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800203c:	e00c      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fd69 	bl	8000b14 <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	4a42      	ldr	r2, [pc, #264]	@ (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d904      	bls.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800204e:	2313      	movs	r3, #19
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	2203      	movs	r2, #3
 8002054:	701a      	strb	r2, [r3, #0]
          break;
 8002056:	e004      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002058:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	2202      	movs	r2, #2
 800205e:	4013      	ands	r3, r2
 8002060:	d0ed      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002062:	2313      	movs	r3, #19
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206c:	4b36      	ldr	r3, [pc, #216]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	4a36      	ldr	r2, [pc, #216]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	4b33      	ldr	r3, [pc, #204]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800207c:	430a      	orrs	r2, r1
 800207e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002080:	e005      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002082:	2312      	movs	r3, #18
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2213      	movs	r2, #19
 8002088:	18ba      	adds	r2, r7, r2
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800208e:	2311      	movs	r3, #17
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800209a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800209c:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800209e:	492e      	ldr	r1, [pc, #184]	@ (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	4013      	ands	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ae:	4b26      	ldr	r3, [pc, #152]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b2:	2203      	movs	r2, #3
 80020b4:	4393      	bics	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	4a22      	ldr	r2, [pc, #136]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2220      	movs	r2, #32
 80020e6:	4013      	ands	r3, r2
 80020e8:	d008      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020ea:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	0899      	lsrs	r1, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	4b14      	ldr	r3, [pc, #80]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2204      	movs	r2, #4
 8002102:	4013      	ands	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	4a15      	ldr	r2, [pc, #84]	@ (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002116:	430a      	orrs	r2, r1
 8002118:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2280      	movs	r2, #128	@ 0x80
 8002120:	4013      	ands	r3, r2
 8002122:	d009      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	22e0      	movs	r2, #224	@ 0xe0
 800212a:	4393      	bics	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002138:	2312      	movs	r3, #18
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b006      	add	sp, #24
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	40021000 	.word	0x40021000
 800214c:	fffffcff 	.word	0xfffffcff
 8002150:	fffeffff 	.word	0xfffeffff
 8002154:	00001388 	.word	0x00001388
 8002158:	efffffff 	.word	0xefffffff
 800215c:	ffffcfff 	.word	0xffffcfff
 8002160:	ffff3fff 	.word	0xffff3fff

08002164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e046      	b.n	8002204 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2288      	movs	r2, #136	@ 0x88
 800217a:	589b      	ldr	r3, [r3, r2]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2284      	movs	r2, #132	@ 0x84
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f7fe fb66 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2288      	movs	r2, #136	@ 0x88
 8002194:	2124      	movs	r1, #36	@ 0x24
 8002196:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2101      	movs	r1, #1
 80021a4:	438a      	bics	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 f9aa 	bl	800250c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 f828 	bl	8002210 <UART_SetConfig>
 80021c0:	0003      	movs	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e01c      	b.n	8002204 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	490d      	ldr	r1, [pc, #52]	@ (800220c <HAL_UART_Init+0xa8>)
 80021d6:	400a      	ands	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	212a      	movs	r1, #42	@ 0x2a
 80021e6:	438a      	bics	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 fa39 	bl	8002674 <UART_CheckIdleState>
 8002202:	0003      	movs	r3, r0
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}
 800220c:	ffffb7ff 	.word	0xffffb7ff

08002210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002218:	231e      	movs	r3, #30
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4aab      	ldr	r2, [pc, #684]	@ (80024ec <UART_SetConfig+0x2dc>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4aa6      	ldr	r2, [pc, #664]	@ (80024f0 <UART_SetConfig+0x2e0>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a9d      	ldr	r2, [pc, #628]	@ (80024f4 <UART_SetConfig+0x2e4>)
 800227e:	4013      	ands	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	430a      	orrs	r2, r1
 800228a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	220f      	movs	r2, #15
 8002294:	4393      	bics	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a93      	ldr	r2, [pc, #588]	@ (80024f8 <UART_SetConfig+0x2e8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d127      	bne.n	80022fe <UART_SetConfig+0xee>
 80022ae:	4b93      	ldr	r3, [pc, #588]	@ (80024fc <UART_SetConfig+0x2ec>)
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	2203      	movs	r2, #3
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d017      	beq.n	80022ea <UART_SetConfig+0xda>
 80022ba:	d81b      	bhi.n	80022f4 <UART_SetConfig+0xe4>
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d00a      	beq.n	80022d6 <UART_SetConfig+0xc6>
 80022c0:	d818      	bhi.n	80022f4 <UART_SetConfig+0xe4>
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <UART_SetConfig+0xbc>
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d00a      	beq.n	80022e0 <UART_SetConfig+0xd0>
 80022ca:	e013      	b.n	80022f4 <UART_SetConfig+0xe4>
 80022cc:	231f      	movs	r3, #31
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
 80022d4:	e021      	b.n	800231a <UART_SetConfig+0x10a>
 80022d6:	231f      	movs	r3, #31
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e01c      	b.n	800231a <UART_SetConfig+0x10a>
 80022e0:	231f      	movs	r3, #31
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2204      	movs	r2, #4
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e017      	b.n	800231a <UART_SetConfig+0x10a>
 80022ea:	231f      	movs	r3, #31
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	2208      	movs	r2, #8
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e012      	b.n	800231a <UART_SetConfig+0x10a>
 80022f4:	231f      	movs	r3, #31
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	2210      	movs	r2, #16
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e00d      	b.n	800231a <UART_SetConfig+0x10a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7f      	ldr	r2, [pc, #508]	@ (8002500 <UART_SetConfig+0x2f0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d104      	bne.n	8002312 <UART_SetConfig+0x102>
 8002308:	231f      	movs	r3, #31
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e003      	b.n	800231a <UART_SetConfig+0x10a>
 8002312:	231f      	movs	r3, #31
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2210      	movs	r2, #16
 8002318:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	429a      	cmp	r2, r3
 8002324:	d000      	beq.n	8002328 <UART_SetConfig+0x118>
 8002326:	e06f      	b.n	8002408 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002328:	231f      	movs	r3, #31
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d01f      	beq.n	8002372 <UART_SetConfig+0x162>
 8002332:	dc22      	bgt.n	800237a <UART_SetConfig+0x16a>
 8002334:	2b04      	cmp	r3, #4
 8002336:	d017      	beq.n	8002368 <UART_SetConfig+0x158>
 8002338:	dc1f      	bgt.n	800237a <UART_SetConfig+0x16a>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <UART_SetConfig+0x134>
 800233e:	2b02      	cmp	r3, #2
 8002340:	d005      	beq.n	800234e <UART_SetConfig+0x13e>
 8002342:	e01a      	b.n	800237a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002344:	f7ff fe0a 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8002348:	0003      	movs	r3, r0
 800234a:	61bb      	str	r3, [r7, #24]
        break;
 800234c:	e01c      	b.n	8002388 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800234e:	4b6b      	ldr	r3, [pc, #428]	@ (80024fc <UART_SetConfig+0x2ec>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2207      	movs	r2, #7
 8002356:	4013      	ands	r3, r2
 8002358:	3301      	adds	r3, #1
 800235a:	0019      	movs	r1, r3
 800235c:	4869      	ldr	r0, [pc, #420]	@ (8002504 <UART_SetConfig+0x2f4>)
 800235e:	f7fd fed3 	bl	8000108 <__udivsi3>
 8002362:	0003      	movs	r3, r0
 8002364:	61bb      	str	r3, [r7, #24]
        break;
 8002366:	e00f      	b.n	8002388 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002368:	f7ff fd8a 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800236c:	0003      	movs	r3, r0
 800236e:	61bb      	str	r3, [r7, #24]
        break;
 8002370:	e00a      	b.n	8002388 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	61bb      	str	r3, [r7, #24]
        break;
 8002378:	e006      	b.n	8002388 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800237e:	231e      	movs	r3, #30
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
        break;
 8002386:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d100      	bne.n	8002390 <UART_SetConfig+0x180>
 800238e:	e097      	b.n	80024c0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002394:	4b5c      	ldr	r3, [pc, #368]	@ (8002508 <UART_SetConfig+0x2f8>)
 8002396:	0052      	lsls	r2, r2, #1
 8002398:	5ad3      	ldrh	r3, [r2, r3]
 800239a:	0019      	movs	r1, r3
 800239c:	69b8      	ldr	r0, [r7, #24]
 800239e:	f7fd feb3 	bl	8000108 <__udivsi3>
 80023a2:	0003      	movs	r3, r0
 80023a4:	005a      	lsls	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	18d2      	adds	r2, r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0019      	movs	r1, r3
 80023b4:	0010      	movs	r0, r2
 80023b6:	f7fd fea7 	bl	8000108 <__udivsi3>
 80023ba:	0003      	movs	r3, r0
 80023bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d91c      	bls.n	80023fe <UART_SetConfig+0x1ee>
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	025b      	lsls	r3, r3, #9
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d217      	bcs.n	80023fe <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	200e      	movs	r0, #14
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	210f      	movs	r1, #15
 80023d8:	438a      	bics	r2, r1
 80023da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2207      	movs	r2, #7
 80023e4:	4013      	ands	r3, r2
 80023e6:	b299      	uxth	r1, r3
 80023e8:	183b      	adds	r3, r7, r0
 80023ea:	183a      	adds	r2, r7, r0
 80023ec:	8812      	ldrh	r2, [r2, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	183a      	adds	r2, r7, r0
 80023f8:	8812      	ldrh	r2, [r2, #0]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	e060      	b.n	80024c0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80023fe:	231e      	movs	r3, #30
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e05b      	b.n	80024c0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002408:	231f      	movs	r3, #31
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d01f      	beq.n	8002452 <UART_SetConfig+0x242>
 8002412:	dc22      	bgt.n	800245a <UART_SetConfig+0x24a>
 8002414:	2b04      	cmp	r3, #4
 8002416:	d017      	beq.n	8002448 <UART_SetConfig+0x238>
 8002418:	dc1f      	bgt.n	800245a <UART_SetConfig+0x24a>
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <UART_SetConfig+0x214>
 800241e:	2b02      	cmp	r3, #2
 8002420:	d005      	beq.n	800242e <UART_SetConfig+0x21e>
 8002422:	e01a      	b.n	800245a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002424:	f7ff fd9a 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8002428:	0003      	movs	r3, r0
 800242a:	61bb      	str	r3, [r7, #24]
        break;
 800242c:	e01c      	b.n	8002468 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800242e:	4b33      	ldr	r3, [pc, #204]	@ (80024fc <UART_SetConfig+0x2ec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2207      	movs	r2, #7
 8002436:	4013      	ands	r3, r2
 8002438:	3301      	adds	r3, #1
 800243a:	0019      	movs	r1, r3
 800243c:	4831      	ldr	r0, [pc, #196]	@ (8002504 <UART_SetConfig+0x2f4>)
 800243e:	f7fd fe63 	bl	8000108 <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]
        break;
 8002446:	e00f      	b.n	8002468 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002448:	f7ff fd1a 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800244c:	0003      	movs	r3, r0
 800244e:	61bb      	str	r3, [r7, #24]
        break;
 8002450:	e00a      	b.n	8002468 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	61bb      	str	r3, [r7, #24]
        break;
 8002458:	e006      	b.n	8002468 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800245e:	231e      	movs	r3, #30
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
        break;
 8002466:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d028      	beq.n	80024c0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002472:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <UART_SetConfig+0x2f8>)
 8002474:	0052      	lsls	r2, r2, #1
 8002476:	5ad3      	ldrh	r3, [r2, r3]
 8002478:	0019      	movs	r1, r3
 800247a:	69b8      	ldr	r0, [r7, #24]
 800247c:	f7fd fe44 	bl	8000108 <__udivsi3>
 8002480:	0003      	movs	r3, r0
 8002482:	001a      	movs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	18d2      	adds	r2, r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0019      	movs	r1, r3
 8002492:	0010      	movs	r0, r2
 8002494:	f7fd fe38 	bl	8000108 <__udivsi3>
 8002498:	0003      	movs	r3, r0
 800249a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	d90a      	bls.n	80024b8 <UART_SetConfig+0x2a8>
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	2380      	movs	r3, #128	@ 0x80
 80024a6:	025b      	lsls	r3, r3, #9
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d205      	bcs.n	80024b8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	e003      	b.n	80024c0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80024b8:	231e      	movs	r3, #30
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	226a      	movs	r2, #106	@ 0x6a
 80024c4:	2101      	movs	r1, #1
 80024c6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2268      	movs	r2, #104	@ 0x68
 80024cc:	2101      	movs	r1, #1
 80024ce:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80024dc:	231e      	movs	r3, #30
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b008      	add	sp, #32
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	cfff69f3 	.word	0xcfff69f3
 80024f0:	ffffcfff 	.word	0xffffcfff
 80024f4:	11fff4ff 	.word	0x11fff4ff
 80024f8:	40013800 	.word	0x40013800
 80024fc:	40021000 	.word	0x40021000
 8002500:	40004400 	.word	0x40004400
 8002504:	02dc6c00 	.word	0x02dc6c00
 8002508:	08002c78 	.word	0x08002c78

0800250c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	2208      	movs	r2, #8
 800251a:	4013      	ands	r3, r2
 800251c:	d00b      	beq.n	8002536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a4a      	ldr	r2, [pc, #296]	@ (8002650 <UART_AdvFeatureConfig+0x144>)
 8002526:	4013      	ands	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	2201      	movs	r2, #1
 800253c:	4013      	ands	r3, r2
 800253e:	d00b      	beq.n	8002558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4a43      	ldr	r2, [pc, #268]	@ (8002654 <UART_AdvFeatureConfig+0x148>)
 8002548:	4013      	ands	r3, r2
 800254a:	0019      	movs	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	2202      	movs	r2, #2
 800255e:	4013      	ands	r3, r2
 8002560:	d00b      	beq.n	800257a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a3b      	ldr	r2, [pc, #236]	@ (8002658 <UART_AdvFeatureConfig+0x14c>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	2204      	movs	r2, #4
 8002580:	4013      	ands	r3, r2
 8002582:	d00b      	beq.n	800259c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a34      	ldr	r2, [pc, #208]	@ (800265c <UART_AdvFeatureConfig+0x150>)
 800258c:	4013      	ands	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	2210      	movs	r2, #16
 80025a2:	4013      	ands	r3, r2
 80025a4:	d00b      	beq.n	80025be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002660 <UART_AdvFeatureConfig+0x154>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	0019      	movs	r1, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	2220      	movs	r2, #32
 80025c4:	4013      	ands	r3, r2
 80025c6:	d00b      	beq.n	80025e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4a25      	ldr	r2, [pc, #148]	@ (8002664 <UART_AdvFeatureConfig+0x158>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	2240      	movs	r2, #64	@ 0x40
 80025e6:	4013      	ands	r3, r2
 80025e8:	d01d      	beq.n	8002626 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002668 <UART_AdvFeatureConfig+0x15c>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	035b      	lsls	r3, r3, #13
 800260a:	429a      	cmp	r2, r3
 800260c:	d10b      	bne.n	8002626 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a15      	ldr	r2, [pc, #84]	@ (800266c <UART_AdvFeatureConfig+0x160>)
 8002616:	4013      	ands	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	2280      	movs	r2, #128	@ 0x80
 800262c:	4013      	ands	r3, r2
 800262e:	d00b      	beq.n	8002648 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a0e      	ldr	r2, [pc, #56]	@ (8002670 <UART_AdvFeatureConfig+0x164>)
 8002638:	4013      	ands	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	605a      	str	r2, [r3, #4]
  }
}
 8002648:	46c0      	nop			@ (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}
 8002650:	ffff7fff 	.word	0xffff7fff
 8002654:	fffdffff 	.word	0xfffdffff
 8002658:	fffeffff 	.word	0xfffeffff
 800265c:	fffbffff 	.word	0xfffbffff
 8002660:	ffffefff 	.word	0xffffefff
 8002664:	ffffdfff 	.word	0xffffdfff
 8002668:	ffefffff 	.word	0xffefffff
 800266c:	ff9fffff 	.word	0xff9fffff
 8002670:	fff7ffff 	.word	0xfff7ffff

08002674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b092      	sub	sp, #72	@ 0x48
 8002678:	af02      	add	r7, sp, #8
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2290      	movs	r2, #144	@ 0x90
 8002680:	2100      	movs	r1, #0
 8002682:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002684:	f7fe fa46 	bl	8000b14 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2208      	movs	r2, #8
 8002694:	4013      	ands	r3, r2
 8002696:	2b08      	cmp	r3, #8
 8002698:	d12d      	bne.n	80026f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800269a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800269c:	2280      	movs	r2, #128	@ 0x80
 800269e:	0391      	lsls	r1, r2, #14
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4a47      	ldr	r2, [pc, #284]	@ (80027c0 <UART_CheckIdleState+0x14c>)
 80026a4:	9200      	str	r2, [sp, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f000 f88e 	bl	80027c8 <UART_WaitOnFlagUntilTimeout>
 80026ac:	1e03      	subs	r3, r0, #0
 80026ae:	d022      	beq.n	80026f6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026b0:	f3ef 8310 	mrs	r3, PRIMASK
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80026b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026ba:	2301      	movs	r3, #1
 80026bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c0:	f383 8810 	msr	PRIMASK, r3
}
 80026c4:	46c0      	nop			@ (mov r8, r8)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	438a      	bics	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	f383 8810 	msr	PRIMASK, r3
}
 80026e0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2288      	movs	r2, #136	@ 0x88
 80026e6:	2120      	movs	r1, #32
 80026e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2284      	movs	r2, #132	@ 0x84
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e060      	b.n	80027b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2204      	movs	r2, #4
 80026fe:	4013      	ands	r3, r2
 8002700:	2b04      	cmp	r3, #4
 8002702:	d146      	bne.n	8002792 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002706:	2280      	movs	r2, #128	@ 0x80
 8002708:	03d1      	lsls	r1, r2, #15
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4a2c      	ldr	r2, [pc, #176]	@ (80027c0 <UART_CheckIdleState+0x14c>)
 800270e:	9200      	str	r2, [sp, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	f000 f859 	bl	80027c8 <UART_WaitOnFlagUntilTimeout>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d03b      	beq.n	8002792 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800271a:	f3ef 8310 	mrs	r3, PRIMASK
 800271e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002720:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002722:	637b      	str	r3, [r7, #52]	@ 0x34
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f383 8810 	msr	PRIMASK, r3
}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <UART_CheckIdleState+0x150>)
 800273c:	400a      	ands	r2, r1
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f383 8810 	msr	PRIMASK, r3
}
 800274a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800274c:	f3ef 8310 	mrs	r3, PRIMASK
 8002750:	61bb      	str	r3, [r7, #24]
  return(result);
 8002752:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002754:	633b      	str	r3, [r7, #48]	@ 0x30
 8002756:	2301      	movs	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f383 8810 	msr	PRIMASK, r3
}
 8002760:	46c0      	nop			@ (mov r8, r8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	438a      	bics	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002774:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f383 8810 	msr	PRIMASK, r3
}
 800277c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	228c      	movs	r2, #140	@ 0x8c
 8002782:	2120      	movs	r1, #32
 8002784:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2284      	movs	r2, #132	@ 0x84
 800278a:	2100      	movs	r1, #0
 800278c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e012      	b.n	80027b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2288      	movs	r2, #136	@ 0x88
 8002796:	2120      	movs	r1, #32
 8002798:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	228c      	movs	r2, #140	@ 0x8c
 800279e:	2120      	movs	r1, #32
 80027a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2284      	movs	r2, #132	@ 0x84
 80027b2:	2100      	movs	r1, #0
 80027b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b010      	add	sp, #64	@ 0x40
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	01ffffff 	.word	0x01ffffff
 80027c4:	fffffedf 	.word	0xfffffedf

080027c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d8:	e051      	b.n	800287e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3301      	adds	r3, #1
 80027de:	d04e      	beq.n	800287e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e0:	f7fe f998 	bl	8000b14 <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e051      	b.n	800289e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2204      	movs	r2, #4
 8002802:	4013      	ands	r3, r2
 8002804:	d03b      	beq.n	800287e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b80      	cmp	r3, #128	@ 0x80
 800280a:	d038      	beq.n	800287e <UART_WaitOnFlagUntilTimeout+0xb6>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b40      	cmp	r3, #64	@ 0x40
 8002810:	d035      	beq.n	800287e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2208      	movs	r2, #8
 800281a:	4013      	ands	r3, r2
 800281c:	2b08      	cmp	r3, #8
 800281e:	d111      	bne.n	8002844 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2208      	movs	r2, #8
 8002826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f83c 	bl	80028a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2290      	movs	r2, #144	@ 0x90
 8002834:	2108      	movs	r1, #8
 8002836:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2284      	movs	r2, #132	@ 0x84
 800283c:	2100      	movs	r1, #0
 800283e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e02c      	b.n	800289e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	401a      	ands	r2, r3
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	429a      	cmp	r2, r3
 8002856:	d112      	bne.n	800287e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2280      	movs	r2, #128	@ 0x80
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 f81f 	bl	80028a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2290      	movs	r2, #144	@ 0x90
 800286e:	2120      	movs	r1, #32
 8002870:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2284      	movs	r2, #132	@ 0x84
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e00f      	b.n	800289e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	425a      	negs	r2, r3
 800288e:	4153      	adcs	r3, r2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	001a      	movs	r2, r3
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d09e      	beq.n	80027da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	@ 0x38
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028b0:	f3ef 8310 	mrs	r3, PRIMASK
 80028b4:	617b      	str	r3, [r7, #20]
  return(result);
 80028b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ba:	2301      	movs	r3, #1
 80028bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f383 8810 	msr	PRIMASK, r3
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4926      	ldr	r1, [pc, #152]	@ (800296c <UART_EndRxTransfer+0xc4>)
 80028d2:	400a      	ands	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f383 8810 	msr	PRIMASK, r3
}
 80028e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028e2:	f3ef 8310 	mrs	r3, PRIMASK
 80028e6:	623b      	str	r3, [r7, #32]
  return(result);
 80028e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ec:	2301      	movs	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	f383 8810 	msr	PRIMASK, r3
}
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	491b      	ldr	r1, [pc, #108]	@ (8002970 <UART_EndRxTransfer+0xc8>)
 8002904:	400a      	ands	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	f383 8810 	msr	PRIMASK, r3
}
 8002912:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d118      	bne.n	800294e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800291c:	f3ef 8310 	mrs	r3, PRIMASK
 8002920:	60bb      	str	r3, [r7, #8]
  return(result);
 8002922:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002926:	2301      	movs	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f383 8810 	msr	PRIMASK, r3
}
 8002930:	46c0      	nop			@ (mov r8, r8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2110      	movs	r1, #16
 800293e:	438a      	bics	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f383 8810 	msr	PRIMASK, r3
}
 800294c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	228c      	movs	r2, #140	@ 0x8c
 8002952:	2120      	movs	r1, #32
 8002954:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b00e      	add	sp, #56	@ 0x38
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	fffffedf 	.word	0xfffffedf
 8002970:	effffffe 	.word	0xeffffffe

08002974 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2284      	movs	r2, #132	@ 0x84
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_UARTEx_DisableFifoMode+0x16>
 8002986:	2302      	movs	r3, #2
 8002988:	e027      	b.n	80029da <HAL_UARTEx_DisableFifoMode+0x66>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2284      	movs	r2, #132	@ 0x84
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2288      	movs	r2, #136	@ 0x88
 8002996:	2124      	movs	r1, #36	@ 0x24
 8002998:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2101      	movs	r1, #1
 80029ae:	438a      	bics	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2288      	movs	r2, #136	@ 0x88
 80029cc:	2120      	movs	r1, #32
 80029ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2284      	movs	r2, #132	@ 0x84
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	dfffffff 	.word	0xdfffffff

080029e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2284      	movs	r2, #132	@ 0x84
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e02e      	b.n	8002a5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2284      	movs	r2, #132	@ 0x84
 8002a04:	2101      	movs	r1, #1
 8002a06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2288      	movs	r2, #136	@ 0x88
 8002a0c:	2124      	movs	r1, #36	@ 0x24
 8002a0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	438a      	bics	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	08d9      	lsrs	r1, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f854 	bl	8002aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2288      	movs	r2, #136	@ 0x88
 8002a50:	2120      	movs	r1, #32
 8002a52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2284      	movs	r2, #132	@ 0x84
 8002a58:	2100      	movs	r1, #0
 8002a5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2284      	movs	r2, #132	@ 0x84
 8002a76:	5c9b      	ldrb	r3, [r3, r2]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e02f      	b.n	8002ae0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2284      	movs	r2, #132	@ 0x84
 8002a84:	2101      	movs	r1, #1
 8002a86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2288      	movs	r2, #136	@ 0x88
 8002a8c:	2124      	movs	r1, #36	@ 0x24
 8002a8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	438a      	bics	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f000 f813 	bl	8002aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2288      	movs	r2, #136	@ 0x88
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2284      	movs	r2, #132	@ 0x84
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b004      	add	sp, #16
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	f1ffffff 	.word	0xf1ffffff

08002aec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d108      	bne.n	8002b0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	226a      	movs	r2, #106	@ 0x6a
 8002b00:	2101      	movs	r1, #1
 8002b02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2268      	movs	r2, #104	@ 0x68
 8002b08:	2101      	movs	r1, #1
 8002b0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002b0c:	e043      	b.n	8002b96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002b0e:	260f      	movs	r6, #15
 8002b10:	19bb      	adds	r3, r7, r6
 8002b12:	2208      	movs	r2, #8
 8002b14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002b16:	200e      	movs	r0, #14
 8002b18:	183b      	adds	r3, r7, r0
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	0e5b      	lsrs	r3, r3, #25
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	240d      	movs	r4, #13
 8002b2a:	193b      	adds	r3, r7, r4
 8002b2c:	2107      	movs	r1, #7
 8002b2e:	400a      	ands	r2, r1
 8002b30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	0f5b      	lsrs	r3, r3, #29
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	250c      	movs	r5, #12
 8002b3e:	197b      	adds	r3, r7, r5
 8002b40:	2107      	movs	r1, #7
 8002b42:	400a      	ands	r2, r1
 8002b44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b46:	183b      	adds	r3, r7, r0
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	197a      	adds	r2, r7, r5
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	4914      	ldr	r1, [pc, #80]	@ (8002ba0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002b50:	5c8a      	ldrb	r2, [r1, r2]
 8002b52:	435a      	muls	r2, r3
 8002b54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002b56:	197b      	adds	r3, r7, r5
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002b5e:	0019      	movs	r1, r3
 8002b60:	f7fd fb5c 	bl	800021c <__divsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	b299      	uxth	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	226a      	movs	r2, #106	@ 0x6a
 8002b6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b6e:	19bb      	adds	r3, r7, r6
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	193a      	adds	r2, r7, r4
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	490a      	ldr	r1, [pc, #40]	@ (8002ba0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002b78:	5c8a      	ldrb	r2, [r1, r2]
 8002b7a:	435a      	muls	r2, r3
 8002b7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002b7e:	193b      	adds	r3, r7, r4
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	4a08      	ldr	r2, [pc, #32]	@ (8002ba4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002b86:	0019      	movs	r1, r3
 8002b88:	f7fd fb48 	bl	800021c <__divsi3>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	b299      	uxth	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2268      	movs	r2, #104	@ 0x68
 8002b94:	5299      	strh	r1, [r3, r2]
}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b005      	add	sp, #20
 8002b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	08002c90 	.word	0x08002c90
 8002ba4:	08002c98 	.word	0x08002c98

08002ba8 <memset>:
 8002ba8:	0003      	movs	r3, r0
 8002baa:	1882      	adds	r2, r0, r2
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <memset+0xa>
 8002bb0:	4770      	bx	lr
 8002bb2:	7019      	strb	r1, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	e7f9      	b.n	8002bac <memset+0x4>

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2600      	movs	r6, #0
 8002bbc:	4c0c      	ldr	r4, [pc, #48]	@ (8002bf0 <__libc_init_array+0x38>)
 8002bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8002bf4 <__libc_init_array+0x3c>)
 8002bc0:	1b64      	subs	r4, r4, r5
 8002bc2:	10a4      	asrs	r4, r4, #2
 8002bc4:	42a6      	cmp	r6, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	2600      	movs	r6, #0
 8002bca:	f000 f819 	bl	8002c00 <_init>
 8002bce:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf8 <__libc_init_array+0x40>)
 8002bd0:	4d0a      	ldr	r5, [pc, #40]	@ (8002bfc <__libc_init_array+0x44>)
 8002bd2:	1b64      	subs	r4, r4, r5
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	42a6      	cmp	r6, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	00b3      	lsls	r3, r6, #2
 8002bde:	58eb      	ldr	r3, [r5, r3]
 8002be0:	4798      	blx	r3
 8002be2:	3601      	adds	r6, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	00b3      	lsls	r3, r6, #2
 8002be8:	58eb      	ldr	r3, [r5, r3]
 8002bea:	4798      	blx	r3
 8002bec:	3601      	adds	r6, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	08002ca0 	.word	0x08002ca0
 8002bf4:	08002ca0 	.word	0x08002ca0
 8002bf8:	08002ca4 	.word	0x08002ca4
 8002bfc:	08002ca0 	.word	0x08002ca0

08002c00 <_init>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr

08002c0c <_fini>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr
